import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from datetime import datetime
from services import CatalogService, OrderService


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self, token: str):
        if not isinstance(token, str):
            raise TypeError("Bot token must be string")
        self.bot = Bot(token=token, parse_mode=ParseMode.HTML)
        self.dp = Dispatcher()
        self.catalog = CatalogService()
        self.orders = OrderService()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message(CommandStart())(self._cmd_start)
        self.dp.message()(self._handle_web_app_data)

    @staticmethod
    async def _cmd_start(message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
<b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?</b>
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ø–∞—Å—Ç—å –≤ –º–∏—Ä —Ä–∞–π—Å–∫–æ–≥–æ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è...
        """

        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å üõçÔ∏è",
            web_app=WebAppInfo(url="http://localhost:63342/PythonProject/bot/html.html?_ijt=9emn3fui1udf22pha55unh0887&_ij_reload=RELOAD_ON_SAVE")
        ))
        builder.row(types.InlineKeyboardButton(
            text="Start",
            callback_data="start_registered"
        ))

        await message.answer(welcome_text)
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=builder.as_markup()
        )

    async def _handle_web_app_data(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App"""
        try:
            data = json.loads(message.web_app_data.data)

            if data['action'] == 'place_order':
                order = await self.orders.create_order(
                    user_id=str(message.from_user.id),  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ string
                    product_id=str(data['product_id']),  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                    hours=int(data['hours'])  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                )

                # –¢–µ–ø–µ—Ä—å –∑–∞–∫–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ OrderService
                logger.info(f"New order created: {order['order_id']}")

                await message.answer(f"–ó–∞–∫–∞–∑ #{order['order_id']} —Å–æ–∑–¥–∞–Ω!")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
                await message.answer(
                    f"<b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n"
                    f"–ú–æ–¥–µ–ª—å: {order['product_name']}\n"
                    f"–ß–∞—Å—ã: {order['hours']}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {order['total']} —Ä—É–±\n"
                    f"–î–∞—Ç–∞: {order['date']}"
                )

        except ValueError as e:
            logger.error(f"Validation error: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")
        except Exception as e:
            logger.error(f"WebApp error: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.dp.start_polling(self.bot)


if __name__ == "__main__":
    bot = TelegramBot("8023704901:AAH_NYoPrWjdl512dlerr69LSFh15iZlvGw")
    asyncio.run(bot.run())