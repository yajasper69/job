import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncpg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = {
    "user": "your_username",
    "password": "your_password",
    "database": "food_delivery",
    "host": "localhost"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderFood(StatesGroup):
    choosing_restaurant = State()
    choosing_food = State()
    entering_address = State()
    payment = State()

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.reply("üçî –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã!\n"
                      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                      "/order - –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n"
                      "/cart - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
                      "/history - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")

# –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message_handler(commands=['order'])
async def cmd_order(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ –ë–î
    conn = await asyncpg.connect(**DB_CONFIG)
    restaurants = await conn.fetch("SELECT id, name FROM restaurants")
    await conn.close()
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for restaurant in restaurants:
        keyboard.add(restaurant['name'])
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=keyboard)
    await OrderFood.choosing_restaurant.set()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π...
# (–¥–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–¥—ã, –∞–¥—Ä–µ—Å–∞, –æ–ø–ª–∞—Ç—ã)

async def on_startup(dp):
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    conn = await asyncpg.connect(**DB_CONFIG)
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS restaurants (
            id SERIAL PRIMARY KEY,
            name VARCHAR(100) NOT NULL
        )''')
    # –î—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã...
    await conn.close()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, on_startup=on_startup)
